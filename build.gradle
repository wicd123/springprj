/*
 * Reference Site 
 * 
 * http://netframework.tistory.com/entry/gradle%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-Spring-MVC-Web-Application-Spring-Data-JPA-QueryDSL
 * http://huskdoll.tistory.com/8
 * http://hangaebal.blogspot.kr/2014/06/spring-eclipse-gradle.html
 *
 * https://github.com/bmuschko/gradle-tomcat-plugin
 * https://github.com/bmuschko/gradle-cargo-plugin
 *
 * http://stackoverflow.com/questions/4384809/cause-no-such-property-sourcesets-for-class-org-gradle-api-plugins-convention
 */

// Apply the java plugin to add support for Java
// Plugin 설정, 만약에 code에 대한 static analysis가 필요한 경우에 이곳에 설정.
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
//apply plugin: 'application'






// JAVA Version 1.8
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

// 소스 인코딩 UTF-8로 지정
[compileJava, compileTestJava]*.options.collect {options ->
    options.encoding = 'UTF-8'
    options.debug = true
    options.deprecation = true
    options.compilerArgs.add '-Xlint'
    options.compilerArgs.add '-Xlint:-unchecked'
    options.compilerArgs.add '-Xlint:-serial'
    options.compilerArgs.add '-Xlint:-rawtypes'
}



// 메이븐 Central 저장소 사용
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
}


//
group = 'JavaApplication'
version = '1.0.0'
description = 'Java Application'
defaultTasks = ['clean', 'build' /*, 'distZip', 'installApp' */ ]
// In this section you declare the dependencies for your production and test code
// 의존성 설정
dependencies {

    compile fileTree(dir: "lib", include: ["*.jar"])
 
    // log 라이브러리
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-log4j12:1.7.21'
    compile 'log4j:log4j:1.2.17'
    compile 'com.googlecode.log4jdbc:log4jdbc:1.2'



    // spring 라이브러리    
    compile "org.springframework:spring-core:4.1.7.RELEASE"
    compile "org.springframework:spring-beans:4.1.7.RELEASE"  
    compile "org.springframework:spring-context:4.1.7.RELEASE"
    compile "org.springframework:spring-webmvc:4.1.7.RELEASE"
    compile "org.springframework:spring-aop:4.1.7.RELEASE"
    compile "org.springframework:spring-jdbc:4.1.7.RELEASE"
    compile "org.springframework:spring-tx:4.1.7.RELEASE"
    // https://mvnrepository.com/artifact/org.springframework/spring-aspects
    compile group: 'org.springframework', name: 'spring-aspects', version: '4.1.7.RELEASE'


    // mysql 라이브러리
    compile 'mysql:mysql-connector-java:5.1.38'
    

    // mybatis 라이브러리
    compile 'org.mybatis:mybatis:3.2.8'
    compile 'org.mybatis:mybatis-spring:1.2.2'


    // Apache Commons Lang, a package of Java utility classes for the classes that are in java.lang hierarchy, 
    // or are considered to be so standard as to justify existence in java.lang.
    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.apache.commons:commons-dbcp2:2.0"    
    compile 'commons-beanutils:commons-beanutils:1.9.2' 
    compile 'commons-codec:commons-codec:1.10'   
    compile 'commons-collections:commons-collections:3.2'    


    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}


// main java 소스셋의 디렉토리 추가
sourceSets {

    main {
        java.srcDirs      = ['src/main/java'     ]      
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs      = ['src/test/java'     ]
    }
}


// TEST 설정
test {
    jvmArgs = ['-ea', '-Xmx256m']
    logging.captureStandardOutput(LogLevel.INFO)
    // testReport = false
    
    systemProperties 'property': 'value'
    
    testLogging {
        events 'started', 'passed'
    }
}
 

// 프로젝트 초기화
// 1. java source directory 생성 : src/main/java, src/test/java
// 2. resource directory 생성    : src/main/resource, src/test/resource
// 3. web source directory 생성  : src/main/webapp, src/main/webapp/WEB-INF
task initProject(description: 'initialize project') << {

    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    
    //create webapp directory
    def webappDir = "$rootDir/src/main/webapp"    
    file(webappDir).mkdir()
        
    //Create the WEB-INF directory
    file(webappDir + "/WEB-INF").mkdir()
    
    //Create the META-INF directory
    file(webappDir + "/META-INF").mkdir()           
}


task taskClean << {
    println 'Default Cleaning!'
    
    //commandLine 'cmd', '/c', 'gradle clean'
}

task taskBuild << {
    println 'Default Building!'
    
    //commandLine 'cmd', '/c', 'gradle build'
}

task taskRun << {
    println 'Default Running!'
}

task taskCopy(type: Copy) {
    
    /*
    copy {
        println 'Copy from ${libsDir} into  D:\\Documents\\JAVA\\tomcat\\x64\\lib'
        
        from    '${libsDir}'
        into    'D:\\Documents\\JAVA\\tomcat\\x64\\lib'
        include '*.jar'
    }
    
    copy {
        def dest = "${projectDir}\\..\\kr.co.companymake.website\\src\\main\\webapp\\WEB-INF\\classes"
        println "Copy from " + sourceSets.main.resources.srcDirs  + " into " + dest
        
        from     sourceSets.main.resources.srcDirs  
        into     dest  
        include  "Configuration.xml"
    }
    */
}

// 
clean {
    // dependsOn taskClean    
    
    //delete sourceSets.main.java.srcDirs
}

// compileJava task에 dependency를 걸어줍니다.
compileJava {
    // dependsOn taskBuild
    dependsOn taskCopy
    
    // compile target에 generated된 QClass들의 위치를 추가.
    //source sourceSets.generated.java.srcDirs.iterator().next()
}

assemble {    
    //dependsOn taskCopy
}

idea {
    module {
        sourceDirs += file('src/main/java')
    }
}



/*
jar {
    archiveName = "JavaApplication.jar"

    // manifest.mf 만들고 속성 추가
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart'
        attributes 'Implementation-Version': version
        attributes "Main-Class" : 'JavaApplication.Main'
    }

    //exclude 'log4j.properties'
    //exclude 'jdbc.properties'
}

// JAVA Application
startScripts {

    mainClassName = "JavaApplication.Main"
    applicationName = "companymakecron"
    outputDir = new File(project.buildDir, 'scripts')

    doLast {

        //def unixScriptFile     = file getUnixScript()
        //unixScript.text        = unixScript.text.replace    ('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-Xms256m -Xmx1024m -Dfile.encoding=utf-8"')
        //unixScriptFile.text    = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config')

        //def windowsScriptFile = file getWindowsScript()
        //windowsScriptFile.text = windowsScriptFile.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-Xms256m -Xmx1024m -Dfile.encoding=utf-8"')
        //windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\lib\config', '%APP_HOME%\config')
    }
}

*/
